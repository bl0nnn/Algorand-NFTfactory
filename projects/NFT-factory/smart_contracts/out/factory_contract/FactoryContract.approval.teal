#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 2
    bytecblock 0x151f7c75 "total" "creator" "last_asset_id"
    // smart_contracts/factory_contract/contract.algo.ts:16-17
    // @contract({ stateTotals: { globalUints: 2, globalBytes: 1 } })
    // export class FactoryContract extends Contract {
    txn NumAppArgs
    bz main_after_if_else@10
    pushbytess 0x9ff55d82 0xbe02e462 0x40dbb26c 0xb3d77d0b // method "onCreate()void", method "mint_NFT(string,string,string,uint64,byte[])uint64", method "get_totalMinted()uint64", method "getlastAssetId()uint64"
    txna ApplicationArgs 0
    match main_onCreate_route@3 main_mint_NFT_route@4 main_get_totalMinted_route@5 main_getlastAssetId_route@6

main_after_if_else@10:
    // smart_contracts/factory_contract/contract.algo.ts:16-17
    // @contract({ stateTotals: { globalUints: 2, globalBytes: 1 } })
    // export class FactoryContract extends Contract {
    intc_0 // 0
    return

main_getlastAssetId_route@6:
    // smart_contracts/factory_contract/contract.algo.ts:65
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getlastAssetId
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_get_totalMinted_route@5:
    // smart_contracts/factory_contract/contract.algo.ts:60
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_totalMinted
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_mint_NFT_route@4:
    // smart_contracts/factory_contract/contract.algo.ts:26
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/factory_contract/contract.algo.ts:16-17
    // @contract({ stateTotals: { globalUints: 2, globalBytes: 1 } })
    // export class FactoryContract extends Contract {
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    txna ApplicationArgs 2
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    txna ApplicationArgs 3
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    txna ApplicationArgs 4
    dup
    len
    pushint 8 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    txna ApplicationArgs 5
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    // smart_contracts/factory_contract/contract.algo.ts:26
    // @abimethod()
    callsub mint_NFT
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_onCreate_route@3:
    // smart_contracts/factory_contract/contract.algo.ts:22
    // @abimethod({ onCreate: 'require' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    callsub onCreate
    intc_1 // 1
    return


// smart_contracts/factory_contract/contract.algo.ts::FactoryContract.onCreate() -> void:
onCreate:
    // smart_contracts/factory_contract/contract.algo.ts:18
    // public creator = GlobalState<Account>({ key: 'creator' })
    bytec_2 // "creator"
    // smart_contracts/factory_contract/contract.algo.ts:24
    // this.creator.value = Txn.sender
    txn Sender
    app_global_put
    retsub


// smart_contracts/factory_contract/contract.algo.ts::FactoryContract.mint_NFT(name: bytes, url: bytes, metadata: bytes, quantity: uint64, receiver: bytes) -> uint64:
mint_NFT:
    // smart_contracts/factory_contract/contract.algo.ts:26-27
    // @abimethod()
    // public mint_NFT(name: string, url: string, metadata: string, quantity: uint64, receiver: bytes) {
    proto 5 1
    // smart_contracts/factory_contract/contract.algo.ts:28
    // assert(Txn.sender === this.creator.value, 'Non autorizzato')
    txn Sender
    // smart_contracts/factory_contract/contract.algo.ts:18
    // public creator = GlobalState<Account>({ key: 'creator' })
    intc_0 // 0
    bytec_2 // "creator"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/factory_contract/contract.algo.ts:28
    // assert(Txn.sender === this.creator.value, 'Non autorizzato')
    ==
    assert // Non autorizzato
    // smart_contracts/factory_contract/contract.algo.ts:30-43
    // const itxn_result = itxn
    //   .assetConfig({
    //     total: 1,
    //     decimals: 0,
    //     unitName: 'NFT',
    //     assetName: name,
    //     url: url,
    //     manager: Global.currentApplicationAddress,
    //     reserve: Global.currentApplicationAddress,
    //     freeze: Global.currentApplicationAddress,
    //     clawback: Global.currentApplicationAddress,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/factory_contract/contract.algo.ts:37
    // manager: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/factory_contract/contract.algo.ts:38-40
    // reserve: Global.currentApplicationAddress,
    // freeze: Global.currentApplicationAddress,
    // clawback: Global.currentApplicationAddress,
    dupn 3
    itxn_field ConfigAssetClawback
    itxn_field ConfigAssetFreeze
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetManager
    frame_dig -4
    itxn_field ConfigAssetURL
    frame_dig -5
    itxn_field ConfigAssetName
    // smart_contracts/factory_contract/contract.algo.ts:34
    // unitName: 'NFT',
    pushbytes "NFT"
    itxn_field ConfigAssetUnitName
    // smart_contracts/factory_contract/contract.algo.ts:33
    // decimals: 0,
    intc_0 // 0
    itxn_field ConfigAssetDecimals
    // smart_contracts/factory_contract/contract.algo.ts:32
    // total: 1,
    intc_1 // 1
    itxn_field ConfigAssetTotal
    // smart_contracts/factory_contract/contract.algo.ts:30-42
    // const itxn_result = itxn
    //   .assetConfig({
    //     total: 1,
    //     decimals: 0,
    //     unitName: 'NFT',
    //     assetName: name,
    //     url: url,
    //     manager: Global.currentApplicationAddress,
    //     reserve: Global.currentApplicationAddress,
    //     freeze: Global.currentApplicationAddress,
    //     clawback: Global.currentApplicationAddress,
    //     fee: 0,
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    // smart_contracts/factory_contract/contract.algo.ts:41
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/factory_contract/contract.algo.ts:30-43
    // const itxn_result = itxn
    //   .assetConfig({
    //     total: 1,
    //     decimals: 0,
    //     unitName: 'NFT',
    //     assetName: name,
    //     url: url,
    //     manager: Global.currentApplicationAddress,
    //     reserve: Global.currentApplicationAddress,
    //     freeze: Global.currentApplicationAddress,
    //     clawback: Global.currentApplicationAddress,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    itxn CreatedAssetID
    // smart_contracts/factory_contract/contract.algo.ts:45-52
    // itxn
    //   .assetTransfer({
    //     xferAsset: itxn_result.createdAsset.id,
    //     assetReceiver: receiver,
    //     assetAmount: 1,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/factory_contract/contract.algo.ts:49
    // assetAmount: 1,
    intc_1 // 1
    itxn_field AssetAmount
    frame_dig -1
    itxn_field AssetReceiver
    dup
    itxn_field XferAsset
    // smart_contracts/factory_contract/contract.algo.ts:45-51
    // itxn
    //   .assetTransfer({
    //     xferAsset: itxn_result.createdAsset.id,
    //     assetReceiver: receiver,
    //     assetAmount: 1,
    //     fee: 0,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    // smart_contracts/factory_contract/contract.algo.ts:50
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/factory_contract/contract.algo.ts:45-52
    // itxn
    //   .assetTransfer({
    //     xferAsset: itxn_result.createdAsset.id,
    //     assetReceiver: receiver,
    //     assetAmount: 1,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/factory_contract/contract.algo.ts:20
    // public totalMinted = GlobalState<uint64>({ key: 'total' })
    intc_0 // 0
    bytec_1 // "total"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/factory_contract/contract.algo.ts:54
    // this.totalMinted.value = this.totalMinted.value + Uint64(1)
    intc_1 // 1
    +
    // smart_contracts/factory_contract/contract.algo.ts:20
    // public totalMinted = GlobalState<uint64>({ key: 'total' })
    bytec_1 // "total"
    // smart_contracts/factory_contract/contract.algo.ts:54
    // this.totalMinted.value = this.totalMinted.value + Uint64(1)
    swap
    app_global_put
    // smart_contracts/factory_contract/contract.algo.ts:19
    // public lastAssetId = GlobalState<uint64>({ key: 'last_asset_id' })
    bytec_3 // "last_asset_id"
    // smart_contracts/factory_contract/contract.algo.ts:55
    // this.lastAssetId.value = itxn_result.createdAsset.id
    dig 1
    app_global_put
    // smart_contracts/factory_contract/contract.algo.ts:57
    // return itxn_result.createdAsset.id
    retsub


// smart_contracts/factory_contract/contract.algo.ts::FactoryContract.get_totalMinted() -> uint64:
get_totalMinted:
    // smart_contracts/factory_contract/contract.algo.ts:20
    // public totalMinted = GlobalState<uint64>({ key: 'total' })
    intc_0 // 0
    bytec_1 // "total"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/factory_contract/contract.algo.ts:62
    // return this.totalMinted.value
    retsub


// smart_contracts/factory_contract/contract.algo.ts::FactoryContract.getlastAssetId() -> uint64:
getlastAssetId:
    // smart_contracts/factory_contract/contract.algo.ts:19
    // public lastAssetId = GlobalState<uint64>({ key: 'last_asset_id' })
    intc_0 // 0
    bytec_3 // "last_asset_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/factory_contract/contract.algo.ts:67
    // return this.lastAssetId.value
    retsub
