/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"FactoryContract","structs":{},"methods":[{"name":"onCreate","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"mint_NFT","args":[{"type":"string","name":"name"},{"type":"string","name":"url"},{"type":"byte[]","name":"metadata"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"own_NFT","args":[{"type":"uint64","name":"assetId"},{"type":"string","name":"name"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"get_totalMinted","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":32,"bytes":32},"local":{"ints":0,"bytes":0}},"keys":{"global":{"creator":{"keyType":"AVMString","valueType":"address","key":"Y3JlYXRvcg=="},"totalMinted":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxNaW50ZWQ="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[226],"errorMessage":"Non autorizzato"},{"pc":[78,95,133,198],"errorMessage":"OnCompletion is not NoOp"},{"pc":[202],"errorMessage":"can only call when creating"},{"pc":[81,98,136],"errorMessage":"can only call when not creating"},{"pc":[224,278,320],"errorMessage":"check GlobalState exists"},{"pc":[114,142,158,174],"errorMessage":"invalid array length header"},{"pc":[121,149,165,181],"errorMessage":"invalid number of bytes for arc4.dynamic_array<arc4.uint8>"},{"pc":[107],"errorMessage":"invalid number of bytes for arc4.uint64"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiADAAECJgMLdG90YWxNaW50ZWQEFR98dQdjcmVhdG9yMRtBACOCBASf9V2CBIBmT6wE014kPwRA27JsNhoAjgQAegA5ABMAAiJDMRkURDEYRIgA6BYpTFCwI0MxGRREMRhENhoBSRWBCBJEFzYaAkkiWSQISwEVEkRXAgCIAKIjQzEZFEQxGEQ2GgFJIlkkCEsBFRJEVwIANhoCSSJZJAhLARUSRFcCADYaA0kiWSQISwEVEkRXAgCIABwWKUxQsCNDMRkURDEYFESIAAIjQyoxAGcoImeJigMBMQAiKmVEEkSxMgpHA7IssiuyKrIpi/+yKIv+sieL/bImgANORlSyJSKyIyOyIoEDshAisgGztDwiKGVEIwgoTGeL/UsBZ4mKAgCxMQAjshKyFIv+shGBBLIQIrIBs4v/aYkiKGVEiQ==","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the FactoryContract contract
 */
export type FactoryContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'onCreate()void': Record<string, never>
    'mint_NFT(string,string,byte[])uint64': {
      name: string
      url: string
      metadata: Uint8Array
    }
    'own_NFT(uint64,string)void': {
      assetId: bigint | number
      name: string
    }
    'get_totalMinted()uint64': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'onCreate()void': []
    'mint_NFT(string,string,byte[])uint64': [name: string, url: string, metadata: Uint8Array]
    'own_NFT(uint64,string)void': [assetId: bigint | number, name: string]
    'get_totalMinted()uint64': []
  }
}

/**
 * The return type for each method
 */
export type FactoryContractReturns = {
  'onCreate()void': void
  'mint_NFT(string,string,byte[])uint64': bigint
  'own_NFT(uint64,string)void': void
  'get_totalMinted()uint64': bigint
}

/**
 * Defines the types of available calls and state of the FactoryContract smart contract.
 */
export type FactoryContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'onCreate()void' | 'onCreate', {
      argsObj: FactoryContractArgs['obj']['onCreate()void']
      argsTuple: FactoryContractArgs['tuple']['onCreate()void']
      returns: FactoryContractReturns['onCreate()void']
    }>
    & Record<'mint_NFT(string,string,byte[])uint64' | 'mint_NFT', {
      argsObj: FactoryContractArgs['obj']['mint_NFT(string,string,byte[])uint64']
      argsTuple: FactoryContractArgs['tuple']['mint_NFT(string,string,byte[])uint64']
      returns: FactoryContractReturns['mint_NFT(string,string,byte[])uint64']
    }>
    & Record<'own_NFT(uint64,string)void' | 'own_NFT', {
      argsObj: FactoryContractArgs['obj']['own_NFT(uint64,string)void']
      argsTuple: FactoryContractArgs['tuple']['own_NFT(uint64,string)void']
      returns: FactoryContractReturns['own_NFT(uint64,string)void']
    }>
    & Record<'get_totalMinted()uint64' | 'get_totalMinted', {
      argsObj: FactoryContractArgs['obj']['get_totalMinted()uint64']
      argsTuple: FactoryContractArgs['tuple']['get_totalMinted()uint64']
      returns: FactoryContractReturns['get_totalMinted()uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        creator: string
        totalMinted: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type FactoryContractSignatures = keyof FactoryContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type FactoryContractNonVoidMethodSignatures = keyof FactoryContractTypes['methods'] extends infer T ? T extends keyof FactoryContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the FactoryContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends FactoryContractSignatures> = FactoryContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the FactoryContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends FactoryContractSignatures> = FactoryContractTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = FactoryContractTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type FactoryContractCreateCallParams =
  | Expand<CallParams<FactoryContractArgs['obj']['onCreate()void'] | FactoryContractArgs['tuple']['onCreate()void']> & {method: 'onCreate'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<FactoryContractArgs['obj']['onCreate()void'] | FactoryContractArgs['tuple']['onCreate()void']> & {method: 'onCreate()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type FactoryContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: FactoryContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the FactoryContract smart contract
 */
export abstract class FactoryContractParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends FactoryContractCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'onCreate':
          case 'onCreate()void':
            return FactoryContractParamsFactory.create.onCreate(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the FactoryContract smart contract using the onCreate()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      onCreate(params: CallParams<FactoryContractArgs['obj']['onCreate()void'] | FactoryContractArgs['tuple']['onCreate()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'onCreate()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the mint_NFT(string,string,byte[])uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mintNft(params: CallParams<FactoryContractArgs['obj']['mint_NFT(string,string,byte[])uint64'] | FactoryContractArgs['tuple']['mint_NFT(string,string,byte[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mint_NFT(string,string,byte[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.url, params.args.metadata],
    }
  }
  /**
   * Constructs a no op call for the own_NFT(uint64,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static ownNft(params: CallParams<FactoryContractArgs['obj']['own_NFT(uint64,string)void'] | FactoryContractArgs['tuple']['own_NFT(uint64,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'own_NFT(uint64,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.name],
    }
  }
  /**
   * Constructs a no op call for the get_totalMinted()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotalMinted(params: CallParams<FactoryContractArgs['obj']['get_totalMinted()uint64'] | FactoryContractArgs['tuple']['get_totalMinted()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_totalMinted()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the FactoryContract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class FactoryContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `FactoryContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new FactoryContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new FactoryContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the FactoryContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: FactoryContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? FactoryContractParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (FactoryContractCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new FactoryContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FactoryContract smart contract using the onCreate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      onCreate: (params: CallParams<FactoryContractArgs['obj']['onCreate()void'] | FactoryContractArgs['tuple']['onCreate()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(FactoryContractParamsFactory.create.onCreate(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FactoryContract smart contract using the onCreate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      onCreate: (params: CallParams<FactoryContractArgs['obj']['onCreate()void'] | FactoryContractArgs['tuple']['onCreate()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(FactoryContractParamsFactory.create.onCreate(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FactoryContract smart contract using an ABI method call using the onCreate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      onCreate: async (params: CallParams<FactoryContractArgs['obj']['onCreate()void'] | FactoryContractArgs['tuple']['onCreate()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(FactoryContractParamsFactory.create.onCreate(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | FactoryContractReturns['onCreate()void']) }, appClient: new FactoryContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the FactoryContract smart contract
 */
export class FactoryContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `FactoryContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the FactoryContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `FactoryContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends FactoryContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `FactoryContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<FactoryContractClient> {
    return new FactoryContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `FactoryContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<FactoryContractClient> {
    return new FactoryContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the FactoryContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the FactoryContract smart contract using the `mint_NFT(string,string,byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mintNft: (params: CallParams<FactoryContractArgs['obj']['mint_NFT(string,string,byte[])uint64'] | FactoryContractArgs['tuple']['mint_NFT(string,string,byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryContractParamsFactory.mintNft(params))
    },

    /**
     * Makes a call to the FactoryContract smart contract using the `own_NFT(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    ownNft: (params: CallParams<FactoryContractArgs['obj']['own_NFT(uint64,string)void'] | FactoryContractArgs['tuple']['own_NFT(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FactoryContractParamsFactory.ownNft(params))
    },

    /**
     * Makes a call to the FactoryContract smart contract using the `get_totalMinted()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTotalMinted: (params: CallParams<FactoryContractArgs['obj']['get_totalMinted()uint64'] | FactoryContractArgs['tuple']['get_totalMinted()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FactoryContractParamsFactory.getTotalMinted(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the FactoryContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the FactoryContract smart contract using the `mint_NFT(string,string,byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mintNft: (params: CallParams<FactoryContractArgs['obj']['mint_NFT(string,string,byte[])uint64'] | FactoryContractArgs['tuple']['mint_NFT(string,string,byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryContractParamsFactory.mintNft(params))
    },

    /**
     * Makes a call to the FactoryContract smart contract using the `own_NFT(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    ownNft: (params: CallParams<FactoryContractArgs['obj']['own_NFT(uint64,string)void'] | FactoryContractArgs['tuple']['own_NFT(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FactoryContractParamsFactory.ownNft(params))
    },

    /**
     * Makes a call to the FactoryContract smart contract using the `get_totalMinted()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTotalMinted: (params: CallParams<FactoryContractArgs['obj']['get_totalMinted()uint64'] | FactoryContractArgs['tuple']['get_totalMinted()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FactoryContractParamsFactory.getTotalMinted(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the FactoryContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the FactoryContract smart contract using the `mint_NFT(string,string,byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mintNft: async (params: CallParams<FactoryContractArgs['obj']['mint_NFT(string,string,byte[])uint64'] | FactoryContractArgs['tuple']['mint_NFT(string,string,byte[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryContractParamsFactory.mintNft(params))
      return {...result, return: result.return as unknown as (undefined | FactoryContractReturns['mint_NFT(string,string,byte[])uint64'])}
    },

    /**
     * Makes a call to the FactoryContract smart contract using the `own_NFT(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    ownNft: async (params: CallParams<FactoryContractArgs['obj']['own_NFT(uint64,string)void'] | FactoryContractArgs['tuple']['own_NFT(uint64,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FactoryContractParamsFactory.ownNft(params))
      return {...result, return: result.return as unknown as (undefined | FactoryContractReturns['own_NFT(uint64,string)void'])}
    },

    /**
     * Makes a call to the FactoryContract smart contract using the `get_totalMinted()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTotalMinted: async (params: CallParams<FactoryContractArgs['obj']['get_totalMinted()uint64'] | FactoryContractArgs['tuple']['get_totalMinted()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FactoryContractParamsFactory.getTotalMinted(params))
      return {...result, return: result.return as unknown as (undefined | FactoryContractReturns['get_totalMinted()uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new FactoryContractClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current FactoryContract app
   */
  state = {
    /**
     * Methods to access global state for the current FactoryContract app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          creator: result.creator,
          totalMinted: result.totalMinted,
        }
      },
      /**
       * Get the current value of the creator key in global state
       */
      creator: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("creator")) as string | undefined },
      /**
       * Get the current value of the totalMinted key in global state
       */
      totalMinted: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalMinted")) as bigint | undefined },
    },
  }

  public newGroup(): FactoryContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a mint_NFT(string,string,byte[])uint64 method call against the FactoryContract contract
       */
      mintNft(params: CallParams<FactoryContractArgs['obj']['mint_NFT(string,string,byte[])uint64'] | FactoryContractArgs['tuple']['mint_NFT(string,string,byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mintNft(params)))
        resultMappers.push((v) => client.decodeReturnValue('mint_NFT(string,string,byte[])uint64', v))
        return this
      },
      /**
       * Add a own_NFT(uint64,string)void method call against the FactoryContract contract
       */
      ownNft(params: CallParams<FactoryContractArgs['obj']['own_NFT(uint64,string)void'] | FactoryContractArgs['tuple']['own_NFT(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.ownNft(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_totalMinted()uint64 method call against the FactoryContract contract
       */
      getTotalMinted(params: CallParams<FactoryContractArgs['obj']['get_totalMinted()uint64'] | FactoryContractArgs['tuple']['get_totalMinted()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotalMinted(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_totalMinted()uint64', v))
        return this
      },
      /**
       * Add a clear state call to the FactoryContract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as FactoryContractComposer
  }
}
export type FactoryContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the mint_NFT(string,string,byte[])uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintNft(params?: CallParams<FactoryContractArgs['obj']['mint_NFT(string,string,byte[])uint64'] | FactoryContractArgs['tuple']['mint_NFT(string,string,byte[])uint64']>): FactoryContractComposer<[...TReturns, FactoryContractReturns['mint_NFT(string,string,byte[])uint64'] | undefined]>

  /**
   * Calls the own_NFT(uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  ownNft(params?: CallParams<FactoryContractArgs['obj']['own_NFT(uint64,string)void'] | FactoryContractArgs['tuple']['own_NFT(uint64,string)void']>): FactoryContractComposer<[...TReturns, FactoryContractReturns['own_NFT(uint64,string)void'] | undefined]>

  /**
   * Calls the get_totalMinted()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalMinted(params?: CallParams<FactoryContractArgs['obj']['get_totalMinted()uint64'] | FactoryContractArgs['tuple']['get_totalMinted()uint64']>): FactoryContractComposer<[...TReturns, FactoryContractReturns['get_totalMinted()uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the FactoryContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): FactoryContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): FactoryContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<FactoryContractComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<FactoryContractComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<FactoryContractComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<FactoryContractComposerResults<TReturns>>
}
export type FactoryContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

